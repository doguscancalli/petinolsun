# Scalar
scalar Date
scalar UserSchema

# Enum
enum Animal {
  dog
  cat
  rodent
  fish
  rabbit
  other
}
enum Gender {
  male
  female
}
enum Age {
  baby
  young
  adult
  old
}

# Type
type PetPost {
  id: ID!
  name: String!
  slug: String!
  postType: String!
  location: String!
  animal: Animal!
  age: Age!
  gender: Gender!
  description: String!
  photos: [String!]!
  contactNumber: String!
  whatsapp: Boolean!
  user: UserSchema!
  createdAt: Date!
  updatedAt: Date!
}
type PetPosts {
  docs: [PetPost!]!
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  pagingCounter: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Int
  nextPage: Int
}

# Input
input CreatePetPostInput {
  name: String!
  postType: String!
  location: String!
  animal: Animal!
  age: Age!
  gender: Gender!
  description: String!
  photos: [String!]!
  contactNumber: String!
  whatsapp: Boolean = false
  user: UserSchema!
}
input UpdatePetPostInput {
  name: String
  postType: String
  location: String
  animal: Animal
  age: Age
  gender: Gender
  description: String
  photos: [String!]
  contactNumber: String
  whatsapp: Boolean = false
  user: UserSchema
}
input FilterPetPostsInput {
  limit: Int
  page: Int
  date: String
  postType: String
  animal: Animal
  city: String
  gender: Gender
  age: Age
}

# Query
type Query {
  petPosts(input: FilterPetPostsInput!): PetPosts!
  petPost(slug: String!): PetPost!
}

# Mutation
type Mutation {
  createPetPost(input: CreatePetPostInput!): PetPost!
  updatePetPost(id: ID!, input: UpdatePetPostInput!): PetPost!
  deletePetPost(id: ID!): Boolean!
  deleteAllPetPosts: Boolean!
}
